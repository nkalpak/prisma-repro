
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model InvoiceAddress
 * 
 */
export type InvoiceAddress = {
  id: string
  street: string
  city: string
  postCode: string
  country: string
}

/**
 * Model InvoiceItem
 * 
 */
export type InvoiceItem = {
  id: string
  name: string
  quantity: number
  price: number
  invoiceId: string | null
}

/**
 * Model Invoice
 * 
 */
export type Invoice = {
  id: string
  createdAt: Date
  updatedAt: Date
  paymentDue: Date
  description: string
  paymentTerms: number
  clientName: string
  clientEmail: string
  status: InvoiceStatus
  clientAddressId: string
  senderAddressId: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const InvoiceStatus: {
  draft: 'draft',
  pending: 'pending',
  paid: 'paid'
};

export type InvoiceStatus = (typeof InvoiceStatus)[keyof typeof InvoiceStatus]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more InvoiceAddresses
 * const invoiceAddresses = await prisma.invoiceAddress.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more InvoiceAddresses
   * const invoiceAddresses = await prisma.invoiceAddress.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.invoiceAddress`: Exposes CRUD operations for the **InvoiceAddress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvoiceAddresses
    * const invoiceAddresses = await prisma.invoiceAddress.findMany()
    * ```
    */
  get invoiceAddress(): Prisma.InvoiceAddressDelegate<GlobalReject>;

  /**
   * `prisma.invoiceItem`: Exposes CRUD operations for the **InvoiceItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvoiceItems
    * const invoiceItems = await prisma.invoiceItem.findMany()
    * ```
    */
  get invoiceItem(): Prisma.InvoiceItemDelegate<GlobalReject>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    InvoiceAddress: 'InvoiceAddress',
    InvoiceItem: 'InvoiceItem',
    Invoice: 'Invoice'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type InvoiceCountOutputType
   */


  export type InvoiceCountOutputType = {
    items: number
  }

  export type InvoiceCountOutputTypeSelect = {
    items?: boolean
  }

  export type InvoiceCountOutputTypeGetPayload<
    S extends boolean | null | undefined | InvoiceCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? InvoiceCountOutputType
    : S extends undefined
    ? never
    : S extends InvoiceCountOutputTypeArgs
    ?'include' extends U
    ? InvoiceCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof InvoiceCountOutputType ? InvoiceCountOutputType[P] : never
  } 
    : InvoiceCountOutputType
  : InvoiceCountOutputType




  // Custom InputTypes

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the InvoiceCountOutputType
     * 
    **/
    select?: InvoiceCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model InvoiceAddress
   */


  export type AggregateInvoiceAddress = {
    _count: InvoiceAddressCountAggregateOutputType | null
    _min: InvoiceAddressMinAggregateOutputType | null
    _max: InvoiceAddressMaxAggregateOutputType | null
  }

  export type InvoiceAddressMinAggregateOutputType = {
    id: string | null
    street: string | null
    city: string | null
    postCode: string | null
    country: string | null
  }

  export type InvoiceAddressMaxAggregateOutputType = {
    id: string | null
    street: string | null
    city: string | null
    postCode: string | null
    country: string | null
  }

  export type InvoiceAddressCountAggregateOutputType = {
    id: number
    street: number
    city: number
    postCode: number
    country: number
    _all: number
  }


  export type InvoiceAddressMinAggregateInputType = {
    id?: true
    street?: true
    city?: true
    postCode?: true
    country?: true
  }

  export type InvoiceAddressMaxAggregateInputType = {
    id?: true
    street?: true
    city?: true
    postCode?: true
    country?: true
  }

  export type InvoiceAddressCountAggregateInputType = {
    id?: true
    street?: true
    city?: true
    postCode?: true
    country?: true
    _all?: true
  }

  export type InvoiceAddressAggregateArgs = {
    /**
     * Filter which InvoiceAddress to aggregate.
     * 
    **/
    where?: InvoiceAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InvoiceAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceAddresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvoiceAddresses
    **/
    _count?: true | InvoiceAddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceAddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceAddressMaxAggregateInputType
  }

  export type GetInvoiceAddressAggregateType<T extends InvoiceAddressAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoiceAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoiceAddress[P]>
      : GetScalarType<T[P], AggregateInvoiceAddress[P]>
  }




  export type InvoiceAddressGroupByArgs = {
    where?: InvoiceAddressWhereInput
    orderBy?: Enumerable<InvoiceAddressOrderByWithAggregationInput>
    by: Array<InvoiceAddressScalarFieldEnum>
    having?: InvoiceAddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceAddressCountAggregateInputType | true
    _min?: InvoiceAddressMinAggregateInputType
    _max?: InvoiceAddressMaxAggregateInputType
  }


  export type InvoiceAddressGroupByOutputType = {
    id: string
    street: string
    city: string
    postCode: string
    country: string
    _count: InvoiceAddressCountAggregateOutputType | null
    _min: InvoiceAddressMinAggregateOutputType | null
    _max: InvoiceAddressMaxAggregateOutputType | null
  }

  type GetInvoiceAddressGroupByPayload<T extends InvoiceAddressGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InvoiceAddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceAddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceAddressGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceAddressGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceAddressSelect = {
    id?: boolean
    street?: boolean
    city?: boolean
    postCode?: boolean
    country?: boolean
    invoiceClient?: boolean | InvoiceArgs
    invoiceSender?: boolean | InvoiceArgs
  }

  export type InvoiceAddressInclude = {
    invoiceClient?: boolean | InvoiceArgs
    invoiceSender?: boolean | InvoiceArgs
  }

  export type InvoiceAddressGetPayload<
    S extends boolean | null | undefined | InvoiceAddressArgs,
    U = keyof S
      > = S extends true
        ? InvoiceAddress
    : S extends undefined
    ? never
    : S extends InvoiceAddressArgs | InvoiceAddressFindManyArgs
    ?'include' extends U
    ? InvoiceAddress  & {
    [P in TrueKeys<S['include']>]:
        P extends 'invoiceClient' ? InvoiceGetPayload<S['include'][P]> | null :
        P extends 'invoiceSender' ? InvoiceGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'invoiceClient' ? InvoiceGetPayload<S['select'][P]> | null :
        P extends 'invoiceSender' ? InvoiceGetPayload<S['select'][P]> | null :  P extends keyof InvoiceAddress ? InvoiceAddress[P] : never
  } 
    : InvoiceAddress
  : InvoiceAddress


  type InvoiceAddressCountArgs = Merge<
    Omit<InvoiceAddressFindManyArgs, 'select' | 'include'> & {
      select?: InvoiceAddressCountAggregateInputType | true
    }
  >

  export interface InvoiceAddressDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one InvoiceAddress that matches the filter.
     * @param {InvoiceAddressFindUniqueArgs} args - Arguments to find a InvoiceAddress
     * @example
     * // Get one InvoiceAddress
     * const invoiceAddress = await prisma.invoiceAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoiceAddressFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InvoiceAddressFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'InvoiceAddress'> extends True ? CheckSelect<T, Prisma__InvoiceAddressClient<InvoiceAddress>, Prisma__InvoiceAddressClient<InvoiceAddressGetPayload<T>>> : CheckSelect<T, Prisma__InvoiceAddressClient<InvoiceAddress | null >, Prisma__InvoiceAddressClient<InvoiceAddressGetPayload<T> | null >>

    /**
     * Find the first InvoiceAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAddressFindFirstArgs} args - Arguments to find a InvoiceAddress
     * @example
     * // Get one InvoiceAddress
     * const invoiceAddress = await prisma.invoiceAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoiceAddressFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InvoiceAddressFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'InvoiceAddress'> extends True ? CheckSelect<T, Prisma__InvoiceAddressClient<InvoiceAddress>, Prisma__InvoiceAddressClient<InvoiceAddressGetPayload<T>>> : CheckSelect<T, Prisma__InvoiceAddressClient<InvoiceAddress | null >, Prisma__InvoiceAddressClient<InvoiceAddressGetPayload<T> | null >>

    /**
     * Find zero or more InvoiceAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvoiceAddresses
     * const invoiceAddresses = await prisma.invoiceAddress.findMany()
     * 
     * // Get first 10 InvoiceAddresses
     * const invoiceAddresses = await prisma.invoiceAddress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceAddressWithIdOnly = await prisma.invoiceAddress.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvoiceAddressFindManyArgs>(
      args?: SelectSubset<T, InvoiceAddressFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<InvoiceAddress>>, PrismaPromise<Array<InvoiceAddressGetPayload<T>>>>

    /**
     * Create a InvoiceAddress.
     * @param {InvoiceAddressCreateArgs} args - Arguments to create a InvoiceAddress.
     * @example
     * // Create one InvoiceAddress
     * const InvoiceAddress = await prisma.invoiceAddress.create({
     *   data: {
     *     // ... data to create a InvoiceAddress
     *   }
     * })
     * 
    **/
    create<T extends InvoiceAddressCreateArgs>(
      args: SelectSubset<T, InvoiceAddressCreateArgs>
    ): CheckSelect<T, Prisma__InvoiceAddressClient<InvoiceAddress>, Prisma__InvoiceAddressClient<InvoiceAddressGetPayload<T>>>

    /**
     * Create many InvoiceAddresses.
     *     @param {InvoiceAddressCreateManyArgs} args - Arguments to create many InvoiceAddresses.
     *     @example
     *     // Create many InvoiceAddresses
     *     const invoiceAddress = await prisma.invoiceAddress.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvoiceAddressCreateManyArgs>(
      args?: SelectSubset<T, InvoiceAddressCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a InvoiceAddress.
     * @param {InvoiceAddressDeleteArgs} args - Arguments to delete one InvoiceAddress.
     * @example
     * // Delete one InvoiceAddress
     * const InvoiceAddress = await prisma.invoiceAddress.delete({
     *   where: {
     *     // ... filter to delete one InvoiceAddress
     *   }
     * })
     * 
    **/
    delete<T extends InvoiceAddressDeleteArgs>(
      args: SelectSubset<T, InvoiceAddressDeleteArgs>
    ): CheckSelect<T, Prisma__InvoiceAddressClient<InvoiceAddress>, Prisma__InvoiceAddressClient<InvoiceAddressGetPayload<T>>>

    /**
     * Update one InvoiceAddress.
     * @param {InvoiceAddressUpdateArgs} args - Arguments to update one InvoiceAddress.
     * @example
     * // Update one InvoiceAddress
     * const invoiceAddress = await prisma.invoiceAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoiceAddressUpdateArgs>(
      args: SelectSubset<T, InvoiceAddressUpdateArgs>
    ): CheckSelect<T, Prisma__InvoiceAddressClient<InvoiceAddress>, Prisma__InvoiceAddressClient<InvoiceAddressGetPayload<T>>>

    /**
     * Delete zero or more InvoiceAddresses.
     * @param {InvoiceAddressDeleteManyArgs} args - Arguments to filter InvoiceAddresses to delete.
     * @example
     * // Delete a few InvoiceAddresses
     * const { count } = await prisma.invoiceAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoiceAddressDeleteManyArgs>(
      args?: SelectSubset<T, InvoiceAddressDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvoiceAddresses
     * const invoiceAddress = await prisma.invoiceAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoiceAddressUpdateManyArgs>(
      args: SelectSubset<T, InvoiceAddressUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one InvoiceAddress.
     * @param {InvoiceAddressUpsertArgs} args - Arguments to update or create a InvoiceAddress.
     * @example
     * // Update or create a InvoiceAddress
     * const invoiceAddress = await prisma.invoiceAddress.upsert({
     *   create: {
     *     // ... data to create a InvoiceAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvoiceAddress we want to update
     *   }
     * })
    **/
    upsert<T extends InvoiceAddressUpsertArgs>(
      args: SelectSubset<T, InvoiceAddressUpsertArgs>
    ): CheckSelect<T, Prisma__InvoiceAddressClient<InvoiceAddress>, Prisma__InvoiceAddressClient<InvoiceAddressGetPayload<T>>>

    /**
     * Count the number of InvoiceAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAddressCountArgs} args - Arguments to filter InvoiceAddresses to count.
     * @example
     * // Count the number of InvoiceAddresses
     * const count = await prisma.invoiceAddress.count({
     *   where: {
     *     // ... the filter for the InvoiceAddresses we want to count
     *   }
     * })
    **/
    count<T extends InvoiceAddressCountArgs>(
      args?: Subset<T, InvoiceAddressCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceAddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvoiceAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAddressAggregateArgs>(args: Subset<T, InvoiceAddressAggregateArgs>): PrismaPromise<GetInvoiceAddressAggregateType<T>>

    /**
     * Group by InvoiceAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceAddressGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceAddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceAddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceAddressGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvoiceAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InvoiceAddressClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    invoiceClient<T extends InvoiceArgs = {}>(args?: Subset<T, InvoiceArgs>): CheckSelect<T, Prisma__InvoiceClient<Invoice | null >, Prisma__InvoiceClient<InvoiceGetPayload<T> | null >>;

    invoiceSender<T extends InvoiceArgs = {}>(args?: Subset<T, InvoiceArgs>): CheckSelect<T, Prisma__InvoiceClient<Invoice | null >, Prisma__InvoiceClient<InvoiceGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * InvoiceAddress findUnique
   */
  export type InvoiceAddressFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the InvoiceAddress
     * 
    **/
    select?: InvoiceAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceAddressInclude | null
    /**
     * Throw an Error if a InvoiceAddress can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InvoiceAddress to fetch.
     * 
    **/
    where: InvoiceAddressWhereUniqueInput
  }


  /**
   * InvoiceAddress findFirst
   */
  export type InvoiceAddressFindFirstArgs = {
    /**
     * Select specific fields to fetch from the InvoiceAddress
     * 
    **/
    select?: InvoiceAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceAddressInclude | null
    /**
     * Throw an Error if a InvoiceAddress can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InvoiceAddress to fetch.
     * 
    **/
    where?: InvoiceAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceAddresses.
     * 
    **/
    cursor?: InvoiceAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceAddresses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceAddresses.
     * 
    **/
    distinct?: Enumerable<InvoiceAddressScalarFieldEnum>
  }


  /**
   * InvoiceAddress findMany
   */
  export type InvoiceAddressFindManyArgs = {
    /**
     * Select specific fields to fetch from the InvoiceAddress
     * 
    **/
    select?: InvoiceAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceAddressInclude | null
    /**
     * Filter, which InvoiceAddresses to fetch.
     * 
    **/
    where?: InvoiceAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceAddresses to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceAddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvoiceAddresses.
     * 
    **/
    cursor?: InvoiceAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceAddresses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceAddresses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InvoiceAddressScalarFieldEnum>
  }


  /**
   * InvoiceAddress create
   */
  export type InvoiceAddressCreateArgs = {
    /**
     * Select specific fields to fetch from the InvoiceAddress
     * 
    **/
    select?: InvoiceAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceAddressInclude | null
    /**
     * The data needed to create a InvoiceAddress.
     * 
    **/
    data: XOR<InvoiceAddressCreateInput, InvoiceAddressUncheckedCreateInput>
  }


  /**
   * InvoiceAddress createMany
   */
  export type InvoiceAddressCreateManyArgs = {
    /**
     * The data used to create many InvoiceAddresses.
     * 
    **/
    data: Enumerable<InvoiceAddressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * InvoiceAddress update
   */
  export type InvoiceAddressUpdateArgs = {
    /**
     * Select specific fields to fetch from the InvoiceAddress
     * 
    **/
    select?: InvoiceAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceAddressInclude | null
    /**
     * The data needed to update a InvoiceAddress.
     * 
    **/
    data: XOR<InvoiceAddressUpdateInput, InvoiceAddressUncheckedUpdateInput>
    /**
     * Choose, which InvoiceAddress to update.
     * 
    **/
    where: InvoiceAddressWhereUniqueInput
  }


  /**
   * InvoiceAddress updateMany
   */
  export type InvoiceAddressUpdateManyArgs = {
    /**
     * The data used to update InvoiceAddresses.
     * 
    **/
    data: XOR<InvoiceAddressUpdateManyMutationInput, InvoiceAddressUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceAddresses to update
     * 
    **/
    where?: InvoiceAddressWhereInput
  }


  /**
   * InvoiceAddress upsert
   */
  export type InvoiceAddressUpsertArgs = {
    /**
     * Select specific fields to fetch from the InvoiceAddress
     * 
    **/
    select?: InvoiceAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceAddressInclude | null
    /**
     * The filter to search for the InvoiceAddress to update in case it exists.
     * 
    **/
    where: InvoiceAddressWhereUniqueInput
    /**
     * In case the InvoiceAddress found by the `where` argument doesn't exist, create a new InvoiceAddress with this data.
     * 
    **/
    create: XOR<InvoiceAddressCreateInput, InvoiceAddressUncheckedCreateInput>
    /**
     * In case the InvoiceAddress was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InvoiceAddressUpdateInput, InvoiceAddressUncheckedUpdateInput>
  }


  /**
   * InvoiceAddress delete
   */
  export type InvoiceAddressDeleteArgs = {
    /**
     * Select specific fields to fetch from the InvoiceAddress
     * 
    **/
    select?: InvoiceAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceAddressInclude | null
    /**
     * Filter which InvoiceAddress to delete.
     * 
    **/
    where: InvoiceAddressWhereUniqueInput
  }


  /**
   * InvoiceAddress deleteMany
   */
  export type InvoiceAddressDeleteManyArgs = {
    /**
     * Filter which InvoiceAddresses to delete
     * 
    **/
    where?: InvoiceAddressWhereInput
  }


  /**
   * InvoiceAddress without action
   */
  export type InvoiceAddressArgs = {
    /**
     * Select specific fields to fetch from the InvoiceAddress
     * 
    **/
    select?: InvoiceAddressSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceAddressInclude | null
  }



  /**
   * Model InvoiceItem
   */


  export type AggregateInvoiceItem = {
    _count: InvoiceItemCountAggregateOutputType | null
    _avg: InvoiceItemAvgAggregateOutputType | null
    _sum: InvoiceItemSumAggregateOutputType | null
    _min: InvoiceItemMinAggregateOutputType | null
    _max: InvoiceItemMaxAggregateOutputType | null
  }

  export type InvoiceItemAvgAggregateOutputType = {
    quantity: number | null
    price: number | null
  }

  export type InvoiceItemSumAggregateOutputType = {
    quantity: number | null
    price: number | null
  }

  export type InvoiceItemMinAggregateOutputType = {
    id: string | null
    name: string | null
    quantity: number | null
    price: number | null
    invoiceId: string | null
  }

  export type InvoiceItemMaxAggregateOutputType = {
    id: string | null
    name: string | null
    quantity: number | null
    price: number | null
    invoiceId: string | null
  }

  export type InvoiceItemCountAggregateOutputType = {
    id: number
    name: number
    quantity: number
    price: number
    invoiceId: number
    _all: number
  }


  export type InvoiceItemAvgAggregateInputType = {
    quantity?: true
    price?: true
  }

  export type InvoiceItemSumAggregateInputType = {
    quantity?: true
    price?: true
  }

  export type InvoiceItemMinAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    price?: true
    invoiceId?: true
  }

  export type InvoiceItemMaxAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    price?: true
    invoiceId?: true
  }

  export type InvoiceItemCountAggregateInputType = {
    id?: true
    name?: true
    quantity?: true
    price?: true
    invoiceId?: true
    _all?: true
  }

  export type InvoiceItemAggregateArgs = {
    /**
     * Filter which InvoiceItem to aggregate.
     * 
    **/
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvoiceItems
    **/
    _count?: true | InvoiceItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceItemMaxAggregateInputType
  }

  export type GetInvoiceItemAggregateType<T extends InvoiceItemAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoiceItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoiceItem[P]>
      : GetScalarType<T[P], AggregateInvoiceItem[P]>
  }




  export type InvoiceItemGroupByArgs = {
    where?: InvoiceItemWhereInput
    orderBy?: Enumerable<InvoiceItemOrderByWithAggregationInput>
    by: Array<InvoiceItemScalarFieldEnum>
    having?: InvoiceItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceItemCountAggregateInputType | true
    _avg?: InvoiceItemAvgAggregateInputType
    _sum?: InvoiceItemSumAggregateInputType
    _min?: InvoiceItemMinAggregateInputType
    _max?: InvoiceItemMaxAggregateInputType
  }


  export type InvoiceItemGroupByOutputType = {
    id: string
    name: string
    quantity: number
    price: number
    invoiceId: string | null
    _count: InvoiceItemCountAggregateOutputType | null
    _avg: InvoiceItemAvgAggregateOutputType | null
    _sum: InvoiceItemSumAggregateOutputType | null
    _min: InvoiceItemMinAggregateOutputType | null
    _max: InvoiceItemMaxAggregateOutputType | null
  }

  type GetInvoiceItemGroupByPayload<T extends InvoiceItemGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InvoiceItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceItemGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceItemGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceItemSelect = {
    id?: boolean
    name?: boolean
    quantity?: boolean
    price?: boolean
    Invoice?: boolean | InvoiceArgs
    invoiceId?: boolean
  }

  export type InvoiceItemInclude = {
    Invoice?: boolean | InvoiceArgs
  }

  export type InvoiceItemGetPayload<
    S extends boolean | null | undefined | InvoiceItemArgs,
    U = keyof S
      > = S extends true
        ? InvoiceItem
    : S extends undefined
    ? never
    : S extends InvoiceItemArgs | InvoiceItemFindManyArgs
    ?'include' extends U
    ? InvoiceItem  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Invoice' ? InvoiceGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Invoice' ? InvoiceGetPayload<S['select'][P]> | null :  P extends keyof InvoiceItem ? InvoiceItem[P] : never
  } 
    : InvoiceItem
  : InvoiceItem


  type InvoiceItemCountArgs = Merge<
    Omit<InvoiceItemFindManyArgs, 'select' | 'include'> & {
      select?: InvoiceItemCountAggregateInputType | true
    }
  >

  export interface InvoiceItemDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one InvoiceItem that matches the filter.
     * @param {InvoiceItemFindUniqueArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoiceItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InvoiceItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'InvoiceItem'> extends True ? CheckSelect<T, Prisma__InvoiceItemClient<InvoiceItem>, Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>>> : CheckSelect<T, Prisma__InvoiceItemClient<InvoiceItem | null >, Prisma__InvoiceItemClient<InvoiceItemGetPayload<T> | null >>

    /**
     * Find the first InvoiceItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindFirstArgs} args - Arguments to find a InvoiceItem
     * @example
     * // Get one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoiceItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InvoiceItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'InvoiceItem'> extends True ? CheckSelect<T, Prisma__InvoiceItemClient<InvoiceItem>, Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>>> : CheckSelect<T, Prisma__InvoiceItemClient<InvoiceItem | null >, Prisma__InvoiceItemClient<InvoiceItemGetPayload<T> | null >>

    /**
     * Find zero or more InvoiceItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvoiceItems
     * const invoiceItems = await prisma.invoiceItem.findMany()
     * 
     * // Get first 10 InvoiceItems
     * const invoiceItems = await prisma.invoiceItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceItemWithIdOnly = await prisma.invoiceItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvoiceItemFindManyArgs>(
      args?: SelectSubset<T, InvoiceItemFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<InvoiceItem>>, PrismaPromise<Array<InvoiceItemGetPayload<T>>>>

    /**
     * Create a InvoiceItem.
     * @param {InvoiceItemCreateArgs} args - Arguments to create a InvoiceItem.
     * @example
     * // Create one InvoiceItem
     * const InvoiceItem = await prisma.invoiceItem.create({
     *   data: {
     *     // ... data to create a InvoiceItem
     *   }
     * })
     * 
    **/
    create<T extends InvoiceItemCreateArgs>(
      args: SelectSubset<T, InvoiceItemCreateArgs>
    ): CheckSelect<T, Prisma__InvoiceItemClient<InvoiceItem>, Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>>>

    /**
     * Create many InvoiceItems.
     *     @param {InvoiceItemCreateManyArgs} args - Arguments to create many InvoiceItems.
     *     @example
     *     // Create many InvoiceItems
     *     const invoiceItem = await prisma.invoiceItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvoiceItemCreateManyArgs>(
      args?: SelectSubset<T, InvoiceItemCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a InvoiceItem.
     * @param {InvoiceItemDeleteArgs} args - Arguments to delete one InvoiceItem.
     * @example
     * // Delete one InvoiceItem
     * const InvoiceItem = await prisma.invoiceItem.delete({
     *   where: {
     *     // ... filter to delete one InvoiceItem
     *   }
     * })
     * 
    **/
    delete<T extends InvoiceItemDeleteArgs>(
      args: SelectSubset<T, InvoiceItemDeleteArgs>
    ): CheckSelect<T, Prisma__InvoiceItemClient<InvoiceItem>, Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>>>

    /**
     * Update one InvoiceItem.
     * @param {InvoiceItemUpdateArgs} args - Arguments to update one InvoiceItem.
     * @example
     * // Update one InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoiceItemUpdateArgs>(
      args: SelectSubset<T, InvoiceItemUpdateArgs>
    ): CheckSelect<T, Prisma__InvoiceItemClient<InvoiceItem>, Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>>>

    /**
     * Delete zero or more InvoiceItems.
     * @param {InvoiceItemDeleteManyArgs} args - Arguments to filter InvoiceItems to delete.
     * @example
     * // Delete a few InvoiceItems
     * const { count } = await prisma.invoiceItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoiceItemDeleteManyArgs>(
      args?: SelectSubset<T, InvoiceItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvoiceItems
     * const invoiceItem = await prisma.invoiceItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoiceItemUpdateManyArgs>(
      args: SelectSubset<T, InvoiceItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one InvoiceItem.
     * @param {InvoiceItemUpsertArgs} args - Arguments to update or create a InvoiceItem.
     * @example
     * // Update or create a InvoiceItem
     * const invoiceItem = await prisma.invoiceItem.upsert({
     *   create: {
     *     // ... data to create a InvoiceItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvoiceItem we want to update
     *   }
     * })
    **/
    upsert<T extends InvoiceItemUpsertArgs>(
      args: SelectSubset<T, InvoiceItemUpsertArgs>
    ): CheckSelect<T, Prisma__InvoiceItemClient<InvoiceItem>, Prisma__InvoiceItemClient<InvoiceItemGetPayload<T>>>

    /**
     * Count the number of InvoiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemCountArgs} args - Arguments to filter InvoiceItems to count.
     * @example
     * // Count the number of InvoiceItems
     * const count = await prisma.invoiceItem.count({
     *   where: {
     *     // ... the filter for the InvoiceItems we want to count
     *   }
     * })
    **/
    count<T extends InvoiceItemCountArgs>(
      args?: Subset<T, InvoiceItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvoiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceItemAggregateArgs>(args: Subset<T, InvoiceItemAggregateArgs>): PrismaPromise<GetInvoiceItemAggregateType<T>>

    /**
     * Group by InvoiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceItemGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceItemGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvoiceItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InvoiceItemClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Invoice<T extends InvoiceArgs = {}>(args?: Subset<T, InvoiceArgs>): CheckSelect<T, Prisma__InvoiceClient<Invoice | null >, Prisma__InvoiceClient<InvoiceGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * InvoiceItem findUnique
   */
  export type InvoiceItemFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * Throw an Error if a InvoiceItem can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InvoiceItem to fetch.
     * 
    **/
    where: InvoiceItemWhereUniqueInput
  }


  /**
   * InvoiceItem findFirst
   */
  export type InvoiceItemFindFirstArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * Throw an Error if a InvoiceItem can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which InvoiceItem to fetch.
     * 
    **/
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceItems.
     * 
    **/
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceItems.
     * 
    **/
    distinct?: Enumerable<InvoiceItemScalarFieldEnum>
  }


  /**
   * InvoiceItem findMany
   */
  export type InvoiceItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * Filter, which InvoiceItems to fetch.
     * 
    **/
    where?: InvoiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceItems to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvoiceItems.
     * 
    **/
    cursor?: InvoiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceItems.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InvoiceItemScalarFieldEnum>
  }


  /**
   * InvoiceItem create
   */
  export type InvoiceItemCreateArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * The data needed to create a InvoiceItem.
     * 
    **/
    data: XOR<InvoiceItemCreateInput, InvoiceItemUncheckedCreateInput>
  }


  /**
   * InvoiceItem createMany
   */
  export type InvoiceItemCreateManyArgs = {
    /**
     * The data used to create many InvoiceItems.
     * 
    **/
    data: Enumerable<InvoiceItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * InvoiceItem update
   */
  export type InvoiceItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * The data needed to update a InvoiceItem.
     * 
    **/
    data: XOR<InvoiceItemUpdateInput, InvoiceItemUncheckedUpdateInput>
    /**
     * Choose, which InvoiceItem to update.
     * 
    **/
    where: InvoiceItemWhereUniqueInput
  }


  /**
   * InvoiceItem updateMany
   */
  export type InvoiceItemUpdateManyArgs = {
    /**
     * The data used to update InvoiceItems.
     * 
    **/
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceItems to update
     * 
    **/
    where?: InvoiceItemWhereInput
  }


  /**
   * InvoiceItem upsert
   */
  export type InvoiceItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * The filter to search for the InvoiceItem to update in case it exists.
     * 
    **/
    where: InvoiceItemWhereUniqueInput
    /**
     * In case the InvoiceItem found by the `where` argument doesn't exist, create a new InvoiceItem with this data.
     * 
    **/
    create: XOR<InvoiceItemCreateInput, InvoiceItemUncheckedCreateInput>
    /**
     * In case the InvoiceItem was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InvoiceItemUpdateInput, InvoiceItemUncheckedUpdateInput>
  }


  /**
   * InvoiceItem delete
   */
  export type InvoiceItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
    /**
     * Filter which InvoiceItem to delete.
     * 
    **/
    where: InvoiceItemWhereUniqueInput
  }


  /**
   * InvoiceItem deleteMany
   */
  export type InvoiceItemDeleteManyArgs = {
    /**
     * Filter which InvoiceItems to delete
     * 
    **/
    where?: InvoiceItemWhereInput
  }


  /**
   * InvoiceItem without action
   */
  export type InvoiceItemArgs = {
    /**
     * Select specific fields to fetch from the InvoiceItem
     * 
    **/
    select?: InvoiceItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceItemInclude | null
  }



  /**
   * Model Invoice
   */


  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    paymentTerms: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    paymentTerms: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    paymentDue: Date | null
    description: string | null
    paymentTerms: number | null
    clientName: string | null
    clientEmail: string | null
    status: InvoiceStatus | null
    clientAddressId: string | null
    senderAddressId: string | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    paymentDue: Date | null
    description: string | null
    paymentTerms: number | null
    clientName: string | null
    clientEmail: string | null
    status: InvoiceStatus | null
    clientAddressId: string | null
    senderAddressId: string | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    paymentDue: number
    description: number
    paymentTerms: number
    clientName: number
    clientEmail: number
    status: number
    clientAddressId: number
    senderAddressId: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    paymentTerms?: true
  }

  export type InvoiceSumAggregateInputType = {
    paymentTerms?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    paymentDue?: true
    description?: true
    paymentTerms?: true
    clientName?: true
    clientEmail?: true
    status?: true
    clientAddressId?: true
    senderAddressId?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    paymentDue?: true
    description?: true
    paymentTerms?: true
    clientName?: true
    clientEmail?: true
    status?: true
    clientAddressId?: true
    senderAddressId?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    paymentDue?: true
    description?: true
    paymentTerms?: true
    clientName?: true
    clientEmail?: true
    status?: true
    clientAddressId?: true
    senderAddressId?: true
    _all?: true
  }

  export type InvoiceAggregateArgs = {
    /**
     * Filter which Invoice to aggregate.
     * 
    **/
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs = {
    where?: InvoiceWhereInput
    orderBy?: Enumerable<InvoiceOrderByWithAggregationInput>
    by: Array<InvoiceScalarFieldEnum>
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }


  export type InvoiceGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    paymentDue: Date
    description: string
    paymentTerms: number
    clientName: string
    clientEmail: string
    status: InvoiceStatus
    clientAddressId: string
    senderAddressId: string
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    paymentDue?: boolean
    description?: boolean
    paymentTerms?: boolean
    clientName?: boolean
    clientEmail?: boolean
    status?: boolean
    clientAddress?: boolean | InvoiceAddressArgs
    clientAddressId?: boolean
    senderAddress?: boolean | InvoiceAddressArgs
    senderAddressId?: boolean
    items?: boolean | InvoiceItemFindManyArgs
    _count?: boolean | InvoiceCountOutputTypeArgs
  }

  export type InvoiceInclude = {
    clientAddress?: boolean | InvoiceAddressArgs
    senderAddress?: boolean | InvoiceAddressArgs
    items?: boolean | InvoiceItemFindManyArgs
    _count?: boolean | InvoiceCountOutputTypeArgs
  }

  export type InvoiceGetPayload<
    S extends boolean | null | undefined | InvoiceArgs,
    U = keyof S
      > = S extends true
        ? Invoice
    : S extends undefined
    ? never
    : S extends InvoiceArgs | InvoiceFindManyArgs
    ?'include' extends U
    ? Invoice  & {
    [P in TrueKeys<S['include']>]:
        P extends 'clientAddress' ? InvoiceAddressGetPayload<S['include'][P]> :
        P extends 'senderAddress' ? InvoiceAddressGetPayload<S['include'][P]> :
        P extends 'items' ? Array < InvoiceItemGetPayload<S['include'][P]>>  :
        P extends '_count' ? InvoiceCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'clientAddress' ? InvoiceAddressGetPayload<S['select'][P]> :
        P extends 'senderAddress' ? InvoiceAddressGetPayload<S['select'][P]> :
        P extends 'items' ? Array < InvoiceItemGetPayload<S['select'][P]>>  :
        P extends '_count' ? InvoiceCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Invoice ? Invoice[P] : never
  } 
    : Invoice
  : Invoice


  type InvoiceCountArgs = Merge<
    Omit<InvoiceFindManyArgs, 'select' | 'include'> & {
      select?: InvoiceCountAggregateInputType | true
    }
  >

  export interface InvoiceDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoiceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InvoiceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Invoice'> extends True ? CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>> : CheckSelect<T, Prisma__InvoiceClient<Invoice | null >, Prisma__InvoiceClient<InvoiceGetPayload<T> | null >>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoiceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InvoiceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Invoice'> extends True ? CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>> : CheckSelect<T, Prisma__InvoiceClient<Invoice | null >, Prisma__InvoiceClient<InvoiceGetPayload<T> | null >>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvoiceFindManyArgs>(
      args?: SelectSubset<T, InvoiceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Invoice>>, PrismaPromise<Array<InvoiceGetPayload<T>>>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
    **/
    create<T extends InvoiceCreateArgs>(
      args: SelectSubset<T, InvoiceCreateArgs>
    ): CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>>

    /**
     * Create many Invoices.
     *     @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     *     @example
     *     // Create many Invoices
     *     const invoice = await prisma.invoice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvoiceCreateManyArgs>(
      args?: SelectSubset<T, InvoiceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
    **/
    delete<T extends InvoiceDeleteArgs>(
      args: SelectSubset<T, InvoiceDeleteArgs>
    ): CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoiceUpdateArgs>(
      args: SelectSubset<T, InvoiceUpdateArgs>
    ): CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoiceDeleteManyArgs>(
      args?: SelectSubset<T, InvoiceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoiceUpdateManyArgs>(
      args: SelectSubset<T, InvoiceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
    **/
    upsert<T extends InvoiceUpsertArgs>(
      args: SelectSubset<T, InvoiceUpsertArgs>
    ): CheckSelect<T, Prisma__InvoiceClient<Invoice>, Prisma__InvoiceClient<InvoiceGetPayload<T>>>

    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InvoiceClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    clientAddress<T extends InvoiceAddressArgs = {}>(args?: Subset<T, InvoiceAddressArgs>): CheckSelect<T, Prisma__InvoiceAddressClient<InvoiceAddress | null >, Prisma__InvoiceAddressClient<InvoiceAddressGetPayload<T> | null >>;

    senderAddress<T extends InvoiceAddressArgs = {}>(args?: Subset<T, InvoiceAddressArgs>): CheckSelect<T, Prisma__InvoiceAddressClient<InvoiceAddress | null >, Prisma__InvoiceAddressClient<InvoiceAddressGetPayload<T> | null >>;

    items<T extends InvoiceItemFindManyArgs = {}>(args?: Subset<T, InvoiceItemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<InvoiceItem>>, PrismaPromise<Array<InvoiceItemGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Throw an Error if a Invoice can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Invoice to fetch.
     * 
    **/
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Throw an Error if a Invoice can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Invoice to fetch.
     * 
    **/
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     * 
    **/
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     * 
    **/
    distinct?: Enumerable<InvoiceScalarFieldEnum>
  }


  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Filter, which Invoices to fetch.
     * 
    **/
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     * 
    **/
    orderBy?: Enumerable<InvoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     * 
    **/
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InvoiceScalarFieldEnum>
  }


  /**
   * Invoice create
   */
  export type InvoiceCreateArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * The data needed to create a Invoice.
     * 
    **/
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }


  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs = {
    /**
     * The data used to create many Invoices.
     * 
    **/
    data: Enumerable<InvoiceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * The data needed to update a Invoice.
     * 
    **/
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     * 
    **/
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs = {
    /**
     * The data used to update Invoices.
     * 
    **/
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     * 
    **/
    where?: InvoiceWhereInput
  }


  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     * 
    **/
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     * 
    **/
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }


  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
    /**
     * Filter which Invoice to delete.
     * 
    **/
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs = {
    /**
     * Filter which Invoices to delete
     * 
    **/
    where?: InvoiceWhereInput
  }


  /**
   * Invoice without action
   */
  export type InvoiceArgs = {
    /**
     * Select specific fields to fetch from the Invoice
     * 
    **/
    select?: InvoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: InvoiceInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const InvoiceAddressScalarFieldEnum: {
    id: 'id',
    street: 'street',
    city: 'city',
    postCode: 'postCode',
    country: 'country'
  };

  export type InvoiceAddressScalarFieldEnum = (typeof InvoiceAddressScalarFieldEnum)[keyof typeof InvoiceAddressScalarFieldEnum]


  export const InvoiceItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    quantity: 'quantity',
    price: 'price',
    invoiceId: 'invoiceId'
  };

  export type InvoiceItemScalarFieldEnum = (typeof InvoiceItemScalarFieldEnum)[keyof typeof InvoiceItemScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    paymentDue: 'paymentDue',
    description: 'description',
    paymentTerms: 'paymentTerms',
    clientName: 'clientName',
    clientEmail: 'clientEmail',
    status: 'status',
    clientAddressId: 'clientAddressId',
    senderAddressId: 'senderAddressId'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type InvoiceAddressWhereInput = {
    AND?: Enumerable<InvoiceAddressWhereInput>
    OR?: Enumerable<InvoiceAddressWhereInput>
    NOT?: Enumerable<InvoiceAddressWhereInput>
    id?: StringFilter | string
    street?: StringFilter | string
    city?: StringFilter | string
    postCode?: StringFilter | string
    country?: StringFilter | string
    invoiceClient?: XOR<InvoiceRelationFilter, InvoiceWhereInput> | null
    invoiceSender?: XOR<InvoiceRelationFilter, InvoiceWhereInput> | null
  }

  export type InvoiceAddressOrderByWithRelationInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    postCode?: SortOrder
    country?: SortOrder
    invoiceClient?: InvoiceOrderByWithRelationInput
    invoiceSender?: InvoiceOrderByWithRelationInput
  }

  export type InvoiceAddressWhereUniqueInput = {
    id?: string
  }

  export type InvoiceAddressOrderByWithAggregationInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    postCode?: SortOrder
    country?: SortOrder
    _count?: InvoiceAddressCountOrderByAggregateInput
    _max?: InvoiceAddressMaxOrderByAggregateInput
    _min?: InvoiceAddressMinOrderByAggregateInput
  }

  export type InvoiceAddressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InvoiceAddressScalarWhereWithAggregatesInput>
    OR?: Enumerable<InvoiceAddressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InvoiceAddressScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    street?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    postCode?: StringWithAggregatesFilter | string
    country?: StringWithAggregatesFilter | string
  }

  export type InvoiceItemWhereInput = {
    AND?: Enumerable<InvoiceItemWhereInput>
    OR?: Enumerable<InvoiceItemWhereInput>
    NOT?: Enumerable<InvoiceItemWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    quantity?: IntFilter | number
    price?: IntFilter | number
    Invoice?: XOR<InvoiceRelationFilter, InvoiceWhereInput> | null
    invoiceId?: StringNullableFilter | string | null
  }

  export type InvoiceItemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    Invoice?: InvoiceOrderByWithRelationInput
    invoiceId?: SortOrder
  }

  export type InvoiceItemWhereUniqueInput = {
    id?: string
  }

  export type InvoiceItemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    invoiceId?: SortOrder
    _count?: InvoiceItemCountOrderByAggregateInput
    _avg?: InvoiceItemAvgOrderByAggregateInput
    _max?: InvoiceItemMaxOrderByAggregateInput
    _min?: InvoiceItemMinOrderByAggregateInput
    _sum?: InvoiceItemSumOrderByAggregateInput
  }

  export type InvoiceItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InvoiceItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<InvoiceItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InvoiceItemScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    quantity?: IntWithAggregatesFilter | number
    price?: IntWithAggregatesFilter | number
    invoiceId?: StringNullableWithAggregatesFilter | string | null
  }

  export type InvoiceWhereInput = {
    AND?: Enumerable<InvoiceWhereInput>
    OR?: Enumerable<InvoiceWhereInput>
    NOT?: Enumerable<InvoiceWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    paymentDue?: DateTimeFilter | Date | string
    description?: StringFilter | string
    paymentTerms?: IntFilter | number
    clientName?: StringFilter | string
    clientEmail?: StringFilter | string
    status?: EnumInvoiceStatusFilter | InvoiceStatus
    clientAddress?: XOR<InvoiceAddressRelationFilter, InvoiceAddressWhereInput>
    clientAddressId?: StringFilter | string
    senderAddress?: XOR<InvoiceAddressRelationFilter, InvoiceAddressWhereInput>
    senderAddressId?: StringFilter | string
    items?: InvoiceItemListRelationFilter
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    paymentDue?: SortOrder
    description?: SortOrder
    paymentTerms?: SortOrder
    clientName?: SortOrder
    clientEmail?: SortOrder
    status?: SortOrder
    clientAddress?: InvoiceAddressOrderByWithRelationInput
    clientAddressId?: SortOrder
    senderAddress?: InvoiceAddressOrderByWithRelationInput
    senderAddressId?: SortOrder
    items?: InvoiceItemOrderByRelationAggregateInput
  }

  export type InvoiceWhereUniqueInput = {
    id?: string
    clientAddressId?: string
    senderAddressId?: string
  }

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    paymentDue?: SortOrder
    description?: SortOrder
    paymentTerms?: SortOrder
    clientName?: SortOrder
    clientEmail?: SortOrder
    status?: SortOrder
    clientAddressId?: SortOrder
    senderAddressId?: SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    OR?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InvoiceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    paymentDue?: DateTimeWithAggregatesFilter | Date | string
    description?: StringWithAggregatesFilter | string
    paymentTerms?: IntWithAggregatesFilter | number
    clientName?: StringWithAggregatesFilter | string
    clientEmail?: StringWithAggregatesFilter | string
    status?: EnumInvoiceStatusWithAggregatesFilter | InvoiceStatus
    clientAddressId?: StringWithAggregatesFilter | string
    senderAddressId?: StringWithAggregatesFilter | string
  }

  export type InvoiceAddressCreateInput = {
    id?: string
    street: string
    city: string
    postCode: string
    country: string
    invoiceClient?: InvoiceCreateNestedOneWithoutClientAddressInput
    invoiceSender?: InvoiceCreateNestedOneWithoutSenderAddressInput
  }

  export type InvoiceAddressUncheckedCreateInput = {
    id?: string
    street: string
    city: string
    postCode: string
    country: string
    invoiceClient?: InvoiceUncheckedCreateNestedOneWithoutClientAddressInput
    invoiceSender?: InvoiceUncheckedCreateNestedOneWithoutSenderAddressInput
  }

  export type InvoiceAddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    invoiceClient?: InvoiceUpdateOneWithoutClientAddressInput
    invoiceSender?: InvoiceUpdateOneWithoutSenderAddressInput
  }

  export type InvoiceAddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    invoiceClient?: InvoiceUncheckedUpdateOneWithoutClientAddressInput
    invoiceSender?: InvoiceUncheckedUpdateOneWithoutSenderAddressInput
  }

  export type InvoiceAddressCreateManyInput = {
    id?: string
    street: string
    city: string
    postCode: string
    country: string
  }

  export type InvoiceAddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type InvoiceAddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
  }

  export type InvoiceItemCreateInput = {
    id?: string
    name: string
    quantity: number
    price: number
    Invoice?: InvoiceCreateNestedOneWithoutItemsInput
  }

  export type InvoiceItemUncheckedCreateInput = {
    id?: string
    name: string
    quantity: number
    price: number
    invoiceId?: string | null
  }

  export type InvoiceItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    Invoice?: InvoiceUpdateOneWithoutItemsInput
  }

  export type InvoiceItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    invoiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceItemCreateManyInput = {
    id?: string
    name: string
    quantity: number
    price: number
    invoiceId?: string | null
  }

  export type InvoiceItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    invoiceId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentDue: Date | string
    description: string
    paymentTerms: number
    clientName: string
    clientEmail: string
    status: InvoiceStatus
    clientAddress: InvoiceAddressCreateNestedOneWithoutInvoiceClientInput
    senderAddress: InvoiceAddressCreateNestedOneWithoutInvoiceSenderInput
    items?: InvoiceItemCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentDue: Date | string
    description: string
    paymentTerms: number
    clientName: string
    clientEmail: string
    status: InvoiceStatus
    clientAddressId: string
    senderAddressId: string
    items?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDue?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    paymentTerms?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    clientEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    clientAddress?: InvoiceAddressUpdateOneRequiredWithoutInvoiceClientInput
    senderAddress?: InvoiceAddressUpdateOneRequiredWithoutInvoiceSenderInput
    items?: InvoiceItemUpdateManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDue?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    paymentTerms?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    clientEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    clientAddressId?: StringFieldUpdateOperationsInput | string
    senderAddressId?: StringFieldUpdateOperationsInput | string
    items?: InvoiceItemUncheckedUpdateManyWithoutInvoiceInput
  }

  export type InvoiceCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentDue: Date | string
    description: string
    paymentTerms: number
    clientName: string
    clientEmail: string
    status: InvoiceStatus
    clientAddressId: string
    senderAddressId: string
  }

  export type InvoiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDue?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    paymentTerms?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    clientEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDue?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    paymentTerms?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    clientEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    clientAddressId?: StringFieldUpdateOperationsInput | string
    senderAddressId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type InvoiceRelationFilter = {
    is?: InvoiceWhereInput | null
    isNot?: InvoiceWhereInput | null
  }

  export type InvoiceAddressCountOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    postCode?: SortOrder
    country?: SortOrder
  }

  export type InvoiceAddressMaxOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    postCode?: SortOrder
    country?: SortOrder
  }

  export type InvoiceAddressMinOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    postCode?: SortOrder
    country?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type InvoiceItemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
  }

  export type InvoiceItemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceItemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumInvoiceStatusFilter = {
    equals?: InvoiceStatus
    in?: Enumerable<InvoiceStatus>
    notIn?: Enumerable<InvoiceStatus>
    not?: NestedEnumInvoiceStatusFilter | InvoiceStatus
  }

  export type InvoiceAddressRelationFilter = {
    is?: InvoiceAddressWhereInput
    isNot?: InvoiceAddressWhereInput
  }

  export type InvoiceItemListRelationFilter = {
    every?: InvoiceItemWhereInput
    some?: InvoiceItemWhereInput
    none?: InvoiceItemWhereInput
  }

  export type InvoiceItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    paymentDue?: SortOrder
    description?: SortOrder
    paymentTerms?: SortOrder
    clientName?: SortOrder
    clientEmail?: SortOrder
    status?: SortOrder
    clientAddressId?: SortOrder
    senderAddressId?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    paymentTerms?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    paymentDue?: SortOrder
    description?: SortOrder
    paymentTerms?: SortOrder
    clientName?: SortOrder
    clientEmail?: SortOrder
    status?: SortOrder
    clientAddressId?: SortOrder
    senderAddressId?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    paymentDue?: SortOrder
    description?: SortOrder
    paymentTerms?: SortOrder
    clientName?: SortOrder
    clientEmail?: SortOrder
    status?: SortOrder
    clientAddressId?: SortOrder
    senderAddressId?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    paymentTerms?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumInvoiceStatusWithAggregatesFilter = {
    equals?: InvoiceStatus
    in?: Enumerable<InvoiceStatus>
    notIn?: Enumerable<InvoiceStatus>
    not?: NestedEnumInvoiceStatusWithAggregatesFilter | InvoiceStatus
    _count?: NestedIntFilter
    _min?: NestedEnumInvoiceStatusFilter
    _max?: NestedEnumInvoiceStatusFilter
  }

  export type InvoiceCreateNestedOneWithoutClientAddressInput = {
    create?: XOR<InvoiceCreateWithoutClientAddressInput, InvoiceUncheckedCreateWithoutClientAddressInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutClientAddressInput
    connect?: InvoiceWhereUniqueInput
  }

  export type InvoiceCreateNestedOneWithoutSenderAddressInput = {
    create?: XOR<InvoiceCreateWithoutSenderAddressInput, InvoiceUncheckedCreateWithoutSenderAddressInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutSenderAddressInput
    connect?: InvoiceWhereUniqueInput
  }

  export type InvoiceUncheckedCreateNestedOneWithoutClientAddressInput = {
    create?: XOR<InvoiceCreateWithoutClientAddressInput, InvoiceUncheckedCreateWithoutClientAddressInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutClientAddressInput
    connect?: InvoiceWhereUniqueInput
  }

  export type InvoiceUncheckedCreateNestedOneWithoutSenderAddressInput = {
    create?: XOR<InvoiceCreateWithoutSenderAddressInput, InvoiceUncheckedCreateWithoutSenderAddressInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutSenderAddressInput
    connect?: InvoiceWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type InvoiceUpdateOneWithoutClientAddressInput = {
    create?: XOR<InvoiceCreateWithoutClientAddressInput, InvoiceUncheckedCreateWithoutClientAddressInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutClientAddressInput
    upsert?: InvoiceUpsertWithoutClientAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: InvoiceWhereUniqueInput
    update?: XOR<InvoiceUpdateWithoutClientAddressInput, InvoiceUncheckedUpdateWithoutClientAddressInput>
  }

  export type InvoiceUpdateOneWithoutSenderAddressInput = {
    create?: XOR<InvoiceCreateWithoutSenderAddressInput, InvoiceUncheckedCreateWithoutSenderAddressInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutSenderAddressInput
    upsert?: InvoiceUpsertWithoutSenderAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: InvoiceWhereUniqueInput
    update?: XOR<InvoiceUpdateWithoutSenderAddressInput, InvoiceUncheckedUpdateWithoutSenderAddressInput>
  }

  export type InvoiceUncheckedUpdateOneWithoutClientAddressInput = {
    create?: XOR<InvoiceCreateWithoutClientAddressInput, InvoiceUncheckedCreateWithoutClientAddressInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutClientAddressInput
    upsert?: InvoiceUpsertWithoutClientAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: InvoiceWhereUniqueInput
    update?: XOR<InvoiceUpdateWithoutClientAddressInput, InvoiceUncheckedUpdateWithoutClientAddressInput>
  }

  export type InvoiceUncheckedUpdateOneWithoutSenderAddressInput = {
    create?: XOR<InvoiceCreateWithoutSenderAddressInput, InvoiceUncheckedCreateWithoutSenderAddressInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutSenderAddressInput
    upsert?: InvoiceUpsertWithoutSenderAddressInput
    disconnect?: boolean
    delete?: boolean
    connect?: InvoiceWhereUniqueInput
    update?: XOR<InvoiceUpdateWithoutSenderAddressInput, InvoiceUncheckedUpdateWithoutSenderAddressInput>
  }

  export type InvoiceCreateNestedOneWithoutItemsInput = {
    create?: XOR<InvoiceCreateWithoutItemsInput, InvoiceUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutItemsInput
    connect?: InvoiceWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type InvoiceUpdateOneWithoutItemsInput = {
    create?: XOR<InvoiceCreateWithoutItemsInput, InvoiceUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutItemsInput
    upsert?: InvoiceUpsertWithoutItemsInput
    disconnect?: boolean
    delete?: boolean
    connect?: InvoiceWhereUniqueInput
    update?: XOR<InvoiceUpdateWithoutItemsInput, InvoiceUncheckedUpdateWithoutItemsInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type InvoiceAddressCreateNestedOneWithoutInvoiceClientInput = {
    create?: XOR<InvoiceAddressCreateWithoutInvoiceClientInput, InvoiceAddressUncheckedCreateWithoutInvoiceClientInput>
    connectOrCreate?: InvoiceAddressCreateOrConnectWithoutInvoiceClientInput
    connect?: InvoiceAddressWhereUniqueInput
  }

  export type InvoiceAddressCreateNestedOneWithoutInvoiceSenderInput = {
    create?: XOR<InvoiceAddressCreateWithoutInvoiceSenderInput, InvoiceAddressUncheckedCreateWithoutInvoiceSenderInput>
    connectOrCreate?: InvoiceAddressCreateOrConnectWithoutInvoiceSenderInput
    connect?: InvoiceAddressWhereUniqueInput
  }

  export type InvoiceItemCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<Enumerable<InvoiceItemCreateWithoutInvoiceInput>, Enumerable<InvoiceItemUncheckedCreateWithoutInvoiceInput>>
    connectOrCreate?: Enumerable<InvoiceItemCreateOrConnectWithoutInvoiceInput>
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    connect?: Enumerable<InvoiceItemWhereUniqueInput>
  }

  export type InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<Enumerable<InvoiceItemCreateWithoutInvoiceInput>, Enumerable<InvoiceItemUncheckedCreateWithoutInvoiceInput>>
    connectOrCreate?: Enumerable<InvoiceItemCreateOrConnectWithoutInvoiceInput>
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    connect?: Enumerable<InvoiceItemWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumInvoiceStatusFieldUpdateOperationsInput = {
    set?: InvoiceStatus
  }

  export type InvoiceAddressUpdateOneRequiredWithoutInvoiceClientInput = {
    create?: XOR<InvoiceAddressCreateWithoutInvoiceClientInput, InvoiceAddressUncheckedCreateWithoutInvoiceClientInput>
    connectOrCreate?: InvoiceAddressCreateOrConnectWithoutInvoiceClientInput
    upsert?: InvoiceAddressUpsertWithoutInvoiceClientInput
    connect?: InvoiceAddressWhereUniqueInput
    update?: XOR<InvoiceAddressUpdateWithoutInvoiceClientInput, InvoiceAddressUncheckedUpdateWithoutInvoiceClientInput>
  }

  export type InvoiceAddressUpdateOneRequiredWithoutInvoiceSenderInput = {
    create?: XOR<InvoiceAddressCreateWithoutInvoiceSenderInput, InvoiceAddressUncheckedCreateWithoutInvoiceSenderInput>
    connectOrCreate?: InvoiceAddressCreateOrConnectWithoutInvoiceSenderInput
    upsert?: InvoiceAddressUpsertWithoutInvoiceSenderInput
    connect?: InvoiceAddressWhereUniqueInput
    update?: XOR<InvoiceAddressUpdateWithoutInvoiceSenderInput, InvoiceAddressUncheckedUpdateWithoutInvoiceSenderInput>
  }

  export type InvoiceItemUpdateManyWithoutInvoiceInput = {
    create?: XOR<Enumerable<InvoiceItemCreateWithoutInvoiceInput>, Enumerable<InvoiceItemUncheckedCreateWithoutInvoiceInput>>
    connectOrCreate?: Enumerable<InvoiceItemCreateOrConnectWithoutInvoiceInput>
    upsert?: Enumerable<InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput>
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    set?: Enumerable<InvoiceItemWhereUniqueInput>
    disconnect?: Enumerable<InvoiceItemWhereUniqueInput>
    delete?: Enumerable<InvoiceItemWhereUniqueInput>
    connect?: Enumerable<InvoiceItemWhereUniqueInput>
    update?: Enumerable<InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput>
    updateMany?: Enumerable<InvoiceItemUpdateManyWithWhereWithoutInvoiceInput>
    deleteMany?: Enumerable<InvoiceItemScalarWhereInput>
  }

  export type InvoiceItemUncheckedUpdateManyWithoutInvoiceInput = {
    create?: XOR<Enumerable<InvoiceItemCreateWithoutInvoiceInput>, Enumerable<InvoiceItemUncheckedCreateWithoutInvoiceInput>>
    connectOrCreate?: Enumerable<InvoiceItemCreateOrConnectWithoutInvoiceInput>
    upsert?: Enumerable<InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput>
    createMany?: InvoiceItemCreateManyInvoiceInputEnvelope
    set?: Enumerable<InvoiceItemWhereUniqueInput>
    disconnect?: Enumerable<InvoiceItemWhereUniqueInput>
    delete?: Enumerable<InvoiceItemWhereUniqueInput>
    connect?: Enumerable<InvoiceItemWhereUniqueInput>
    update?: Enumerable<InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput>
    updateMany?: Enumerable<InvoiceItemUpdateManyWithWhereWithoutInvoiceInput>
    deleteMany?: Enumerable<InvoiceItemScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumInvoiceStatusFilter = {
    equals?: InvoiceStatus
    in?: Enumerable<InvoiceStatus>
    notIn?: Enumerable<InvoiceStatus>
    not?: NestedEnumInvoiceStatusFilter | InvoiceStatus
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumInvoiceStatusWithAggregatesFilter = {
    equals?: InvoiceStatus
    in?: Enumerable<InvoiceStatus>
    notIn?: Enumerable<InvoiceStatus>
    not?: NestedEnumInvoiceStatusWithAggregatesFilter | InvoiceStatus
    _count?: NestedIntFilter
    _min?: NestedEnumInvoiceStatusFilter
    _max?: NestedEnumInvoiceStatusFilter
  }

  export type InvoiceCreateWithoutClientAddressInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentDue: Date | string
    description: string
    paymentTerms: number
    clientName: string
    clientEmail: string
    status: InvoiceStatus
    senderAddress: InvoiceAddressCreateNestedOneWithoutInvoiceSenderInput
    items?: InvoiceItemCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutClientAddressInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentDue: Date | string
    description: string
    paymentTerms: number
    clientName: string
    clientEmail: string
    status: InvoiceStatus
    senderAddressId: string
    items?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutClientAddressInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutClientAddressInput, InvoiceUncheckedCreateWithoutClientAddressInput>
  }

  export type InvoiceCreateWithoutSenderAddressInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentDue: Date | string
    description: string
    paymentTerms: number
    clientName: string
    clientEmail: string
    status: InvoiceStatus
    clientAddress: InvoiceAddressCreateNestedOneWithoutInvoiceClientInput
    items?: InvoiceItemCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutSenderAddressInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentDue: Date | string
    description: string
    paymentTerms: number
    clientName: string
    clientEmail: string
    status: InvoiceStatus
    clientAddressId: string
    items?: InvoiceItemUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutSenderAddressInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutSenderAddressInput, InvoiceUncheckedCreateWithoutSenderAddressInput>
  }

  export type InvoiceUpsertWithoutClientAddressInput = {
    update: XOR<InvoiceUpdateWithoutClientAddressInput, InvoiceUncheckedUpdateWithoutClientAddressInput>
    create: XOR<InvoiceCreateWithoutClientAddressInput, InvoiceUncheckedCreateWithoutClientAddressInput>
  }

  export type InvoiceUpdateWithoutClientAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDue?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    paymentTerms?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    clientEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    senderAddress?: InvoiceAddressUpdateOneRequiredWithoutInvoiceSenderInput
    items?: InvoiceItemUpdateManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedUpdateWithoutClientAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDue?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    paymentTerms?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    clientEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    senderAddressId?: StringFieldUpdateOperationsInput | string
    items?: InvoiceItemUncheckedUpdateManyWithoutInvoiceInput
  }

  export type InvoiceUpsertWithoutSenderAddressInput = {
    update: XOR<InvoiceUpdateWithoutSenderAddressInput, InvoiceUncheckedUpdateWithoutSenderAddressInput>
    create: XOR<InvoiceCreateWithoutSenderAddressInput, InvoiceUncheckedCreateWithoutSenderAddressInput>
  }

  export type InvoiceUpdateWithoutSenderAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDue?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    paymentTerms?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    clientEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    clientAddress?: InvoiceAddressUpdateOneRequiredWithoutInvoiceClientInput
    items?: InvoiceItemUpdateManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedUpdateWithoutSenderAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDue?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    paymentTerms?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    clientEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    clientAddressId?: StringFieldUpdateOperationsInput | string
    items?: InvoiceItemUncheckedUpdateManyWithoutInvoiceInput
  }

  export type InvoiceCreateWithoutItemsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentDue: Date | string
    description: string
    paymentTerms: number
    clientName: string
    clientEmail: string
    status: InvoiceStatus
    clientAddress: InvoiceAddressCreateNestedOneWithoutInvoiceClientInput
    senderAddress: InvoiceAddressCreateNestedOneWithoutInvoiceSenderInput
  }

  export type InvoiceUncheckedCreateWithoutItemsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentDue: Date | string
    description: string
    paymentTerms: number
    clientName: string
    clientEmail: string
    status: InvoiceStatus
    clientAddressId: string
    senderAddressId: string
  }

  export type InvoiceCreateOrConnectWithoutItemsInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutItemsInput, InvoiceUncheckedCreateWithoutItemsInput>
  }

  export type InvoiceUpsertWithoutItemsInput = {
    update: XOR<InvoiceUpdateWithoutItemsInput, InvoiceUncheckedUpdateWithoutItemsInput>
    create: XOR<InvoiceCreateWithoutItemsInput, InvoiceUncheckedCreateWithoutItemsInput>
  }

  export type InvoiceUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDue?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    paymentTerms?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    clientEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    clientAddress?: InvoiceAddressUpdateOneRequiredWithoutInvoiceClientInput
    senderAddress?: InvoiceAddressUpdateOneRequiredWithoutInvoiceSenderInput
  }

  export type InvoiceUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentDue?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    paymentTerms?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    clientEmail?: StringFieldUpdateOperationsInput | string
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | InvoiceStatus
    clientAddressId?: StringFieldUpdateOperationsInput | string
    senderAddressId?: StringFieldUpdateOperationsInput | string
  }

  export type InvoiceAddressCreateWithoutInvoiceClientInput = {
    id?: string
    street: string
    city: string
    postCode: string
    country: string
    invoiceSender?: InvoiceCreateNestedOneWithoutSenderAddressInput
  }

  export type InvoiceAddressUncheckedCreateWithoutInvoiceClientInput = {
    id?: string
    street: string
    city: string
    postCode: string
    country: string
    invoiceSender?: InvoiceUncheckedCreateNestedOneWithoutSenderAddressInput
  }

  export type InvoiceAddressCreateOrConnectWithoutInvoiceClientInput = {
    where: InvoiceAddressWhereUniqueInput
    create: XOR<InvoiceAddressCreateWithoutInvoiceClientInput, InvoiceAddressUncheckedCreateWithoutInvoiceClientInput>
  }

  export type InvoiceAddressCreateWithoutInvoiceSenderInput = {
    id?: string
    street: string
    city: string
    postCode: string
    country: string
    invoiceClient?: InvoiceCreateNestedOneWithoutClientAddressInput
  }

  export type InvoiceAddressUncheckedCreateWithoutInvoiceSenderInput = {
    id?: string
    street: string
    city: string
    postCode: string
    country: string
    invoiceClient?: InvoiceUncheckedCreateNestedOneWithoutClientAddressInput
  }

  export type InvoiceAddressCreateOrConnectWithoutInvoiceSenderInput = {
    where: InvoiceAddressWhereUniqueInput
    create: XOR<InvoiceAddressCreateWithoutInvoiceSenderInput, InvoiceAddressUncheckedCreateWithoutInvoiceSenderInput>
  }

  export type InvoiceItemCreateWithoutInvoiceInput = {
    id?: string
    name: string
    quantity: number
    price: number
  }

  export type InvoiceItemUncheckedCreateWithoutInvoiceInput = {
    id?: string
    name: string
    quantity: number
    price: number
  }

  export type InvoiceItemCreateOrConnectWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    create: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceItemCreateManyInvoiceInputEnvelope = {
    data: Enumerable<InvoiceItemCreateManyInvoiceInput>
    skipDuplicates?: boolean
  }

  export type InvoiceAddressUpsertWithoutInvoiceClientInput = {
    update: XOR<InvoiceAddressUpdateWithoutInvoiceClientInput, InvoiceAddressUncheckedUpdateWithoutInvoiceClientInput>
    create: XOR<InvoiceAddressCreateWithoutInvoiceClientInput, InvoiceAddressUncheckedCreateWithoutInvoiceClientInput>
  }

  export type InvoiceAddressUpdateWithoutInvoiceClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    invoiceSender?: InvoiceUpdateOneWithoutSenderAddressInput
  }

  export type InvoiceAddressUncheckedUpdateWithoutInvoiceClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    invoiceSender?: InvoiceUncheckedUpdateOneWithoutSenderAddressInput
  }

  export type InvoiceAddressUpsertWithoutInvoiceSenderInput = {
    update: XOR<InvoiceAddressUpdateWithoutInvoiceSenderInput, InvoiceAddressUncheckedUpdateWithoutInvoiceSenderInput>
    create: XOR<InvoiceAddressCreateWithoutInvoiceSenderInput, InvoiceAddressUncheckedCreateWithoutInvoiceSenderInput>
  }

  export type InvoiceAddressUpdateWithoutInvoiceSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    invoiceClient?: InvoiceUpdateOneWithoutClientAddressInput
  }

  export type InvoiceAddressUncheckedUpdateWithoutInvoiceSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postCode?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    invoiceClient?: InvoiceUncheckedUpdateOneWithoutClientAddressInput
  }

  export type InvoiceItemUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    update: XOR<InvoiceItemUpdateWithoutInvoiceInput, InvoiceItemUncheckedUpdateWithoutInvoiceInput>
    create: XOR<InvoiceItemCreateWithoutInvoiceInput, InvoiceItemUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceItemUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceItemWhereUniqueInput
    data: XOR<InvoiceItemUpdateWithoutInvoiceInput, InvoiceItemUncheckedUpdateWithoutInvoiceInput>
  }

  export type InvoiceItemUpdateManyWithWhereWithoutInvoiceInput = {
    where: InvoiceItemScalarWhereInput
    data: XOR<InvoiceItemUpdateManyMutationInput, InvoiceItemUncheckedUpdateManyWithoutItemsInput>
  }

  export type InvoiceItemScalarWhereInput = {
    AND?: Enumerable<InvoiceItemScalarWhereInput>
    OR?: Enumerable<InvoiceItemScalarWhereInput>
    NOT?: Enumerable<InvoiceItemScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    quantity?: IntFilter | number
    price?: IntFilter | number
    invoiceId?: StringNullableFilter | string | null
  }

  export type InvoiceItemCreateManyInvoiceInput = {
    id?: string
    name: string
    quantity: number
    price: number
  }

  export type InvoiceItemUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceItemUncheckedUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceItemUncheckedUpdateManyWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}